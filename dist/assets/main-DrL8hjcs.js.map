{"version":3,"file":"main-DrL8hjcs.js","sources":["../../src/utils/event-bus.ts","../../src/services/storage-service.ts","../../src/utils/round-types.ts","../../src/app.ts","../../src/main.ts"],"sourcesContent":["export class EventBus {\r\n  private static instance: EventBus;\r\n  private events: Map<string, Function[]> = new Map();\r\n\r\n  static getInstance(): EventBus {\r\n    if (!EventBus.instance) {\r\n      EventBus.instance = new EventBus();\r\n    }\r\n    return EventBus.instance;\r\n  }\r\n\r\n  on(event: string, callback: Function): void {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, []);\r\n    }\r\n    this.events.get(event)!.push(callback);\r\n  }\r\n\r\n  off(event: string, callback: Function): void {\r\n    const callbacks = this.events.get(event);\r\n    if (callbacks) {\r\n      const index = callbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        callbacks.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit(event: string, data?: any): void {\r\n    const callbacks = this.events.get(event);\r\n    if (callbacks) {\r\n      callbacks.forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in event callback for ${event}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    this.events.clear();\r\n  }\r\n}\r\n","import { Result } from '@/types';\r\n\r\nexport class StorageService {\r\n  private static instance: StorageService;\r\n  private readonly storageKey = 'archers-scorecard';\r\n\r\n  static getInstance(): StorageService {\r\n    if (!StorageService.instance) {\r\n      StorageService.instance = new StorageService();\r\n    }\r\n    return StorageService.instance;\r\n  }\r\n\r\n  async save<T>(key: string, data: T): Promise<Result<void>> {\r\n    try {\r\n      if (!this.isStorageAvailable()) {\r\n        return {\r\n          success: false,\r\n          error: new Error('localStorage is not available')\r\n        };\r\n      }\r\n\r\n      const fullKey = `${this.storageKey}.${key}`;\r\n      const serializedData = JSON.stringify(data);\r\n      localStorage.setItem(fullKey, serializedData);\r\n\r\n      return { success: true, data: undefined };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error as Error\r\n      };\r\n    }\r\n  }\r\n\r\n  async load<T>(key: string): Promise<Result<T | null>> {\r\n    try {\r\n      if (!this.isStorageAvailable()) {\r\n        return {\r\n          success: false,\r\n          error: new Error('localStorage is not available')\r\n        };\r\n      }\r\n\r\n      const fullKey = `${this.storageKey}.${key}`;\r\n      const serializedData = localStorage.getItem(fullKey);\r\n\r\n      if (serializedData === null) {\r\n        return { success: true, data: null };\r\n      }\r\n\r\n      const data = JSON.parse(serializedData) as T;\r\n      return { success: true, data };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error as Error\r\n      };\r\n    }\r\n  }\r\n\r\n  async delete(key: string): Promise<Result<void>> {\r\n    try {\r\n      if (!this.isStorageAvailable()) {\r\n        return {\r\n          success: false,\r\n          error: new Error('localStorage is not available')\r\n        };\r\n      }\r\n\r\n      const fullKey = `${this.storageKey}.${key}`;\r\n      localStorage.removeItem(fullKey);\r\n\r\n      return { success: true, data: undefined };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error as Error\r\n      };\r\n    }\r\n  }\r\n\r\n  async clear(): Promise<Result<void>> {\r\n    try {\r\n      if (!this.isStorageAvailable()) {\r\n        return {\r\n          success: false,\r\n          error: new Error('localStorage is not available')\r\n        };\r\n      }\r\n\r\n      // Remove all keys that start with our storage prefix\r\n      const keysToRemove: string[] = [];\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key && key.startsWith(this.storageKey)) {\r\n          keysToRemove.push(key);\r\n        }\r\n      }\r\n\r\n      keysToRemove.forEach(key => localStorage.removeItem(key));\r\n\r\n      return { success: true, data: undefined };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error as Error\r\n      };\r\n    }\r\n  }\r\n\r\n  async exists(key: string): Promise<boolean> {\r\n    try {\r\n      if (!this.isStorageAvailable()) {\r\n        return false;\r\n      }\r\n\r\n      const fullKey = `${this.storageKey}.${key}`;\r\n      return localStorage.getItem(fullKey) !== null;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private isStorageAvailable(): boolean {\r\n    try {\r\n      const test = '__storage_test__';\r\n      localStorage.setItem(test, test);\r\n      localStorage.removeItem(test);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get storage usage information\r\n  getStorageInfo(): { used: number; available: number; percentage: number } {\r\n    if (!this.isStorageAvailable()) {\r\n      return { used: 0, available: 0, percentage: 0 };\r\n    }\r\n\r\n    let used = 0;\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith(this.storageKey)) {\r\n        const value = localStorage.getItem(key);\r\n        if (value) {\r\n          used += key.length + value.length;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Estimate available storage (typical limit is 5-10MB)\r\n    const estimated = 5 * 1024 * 1024; // 5MB estimate\r\n    const percentage = (used / estimated) * 100;\r\n\r\n    return {\r\n      used,\r\n      available: estimated - used,\r\n      percentage: Math.min(percentage, 100)\r\n    };\r\n  }\r\n}\r\n","import { RoundType, TargetFace } from '@/types';\r\n\r\n// Standard World Archery target faces\r\nconst TARGET_122CM: TargetFace = {\r\n  size: 122,\r\n  rings: [\r\n    { value: 10, innerRadius: 0, outerRadius: 6.1, color: '#FFD700' }, // Gold inner\r\n    { value: 9, innerRadius: 6.1, outerRadius: 12.2, color: '#FFD700' }, // Gold outer\r\n    { value: 8, innerRadius: 12.2, outerRadius: 18.3, color: '#FF0000' }, // Red inner\r\n    { value: 7, innerRadius: 18.3, outerRadius: 24.4, color: '#FF0000' }, // Red outer\r\n    { value: 6, innerRadius: 24.4, outerRadius: 30.5, color: '#0000FF' }, // Blue inner\r\n    { value: 5, innerRadius: 30.5, outerRadius: 36.6, color: '#0000FF' }, // Blue outer\r\n    { value: 4, innerRadius: 36.6, outerRadius: 42.7, color: '#000000' }, // Black inner\r\n    { value: 3, innerRadius: 42.7, outerRadius: 48.8, color: '#000000' }, // Black outer\r\n    { value: 2, innerRadius: 48.8, outerRadius: 54.9, color: '#FFFFFF' }, // White inner\r\n    { value: 1, innerRadius: 54.9, outerRadius: 61.0, color: '#FFFFFF' }, // White outer\r\n  ]\r\n};\r\n\r\nconst TARGET_80CM: TargetFace = {\r\n  size: 80,\r\n  rings: [\r\n    { value: 10, innerRadius: 0, outerRadius: 4.0, color: '#FFD700' },\r\n    { value: 9, innerRadius: 4.0, outerRadius: 8.0, color: '#FFD700' },\r\n    { value: 8, innerRadius: 8.0, outerRadius: 12.0, color: '#FF0000' },\r\n    { value: 7, innerRadius: 12.0, outerRadius: 16.0, color: '#FF0000' },\r\n    { value: 6, innerRadius: 16.0, outerRadius: 20.0, color: '#0000FF' },\r\n    { value: 5, innerRadius: 20.0, outerRadius: 24.0, color: '#0000FF' },\r\n    { value: 4, innerRadius: 24.0, outerRadius: 28.0, color: '#000000' },\r\n    { value: 3, innerRadius: 28.0, outerRadius: 32.0, color: '#000000' },\r\n    { value: 2, innerRadius: 32.0, outerRadius: 36.0, color: '#FFFFFF' },\r\n    { value: 1, innerRadius: 36.0, outerRadius: 40.0, color: '#FFFFFF' },\r\n  ]\r\n};\r\n\r\nconst TARGET_40CM: TargetFace = {\r\n  size: 40,\r\n  rings: [\r\n    { value: 10, innerRadius: 0, outerRadius: 2.0, color: '#FFD700' },\r\n    { value: 9, innerRadius: 2.0, outerRadius: 4.0, color: '#FFD700' },\r\n    { value: 8, innerRadius: 4.0, outerRadius: 6.0, color: '#FF0000' },\r\n    { value: 7, innerRadius: 6.0, outerRadius: 8.0, color: '#FF0000' },\r\n    { value: 6, innerRadius: 8.0, outerRadius: 10.0, color: '#0000FF' },\r\n    { value: 5, innerRadius: 10.0, outerRadius: 12.0, color: '#0000FF' },\r\n    { value: 4, innerRadius: 12.0, outerRadius: 14.0, color: '#000000' },\r\n    { value: 3, innerRadius: 14.0, outerRadius: 16.0, color: '#000000' },\r\n    { value: 2, innerRadius: 16.0, outerRadius: 18.0, color: '#FFFFFF' },\r\n    { value: 1, innerRadius: 18.0, outerRadius: 20.0, color: '#FFFFFF' },\r\n  ]\r\n};\r\n\r\n// Standard round types following World Archery rules\r\nconst ROUND_TYPES: RoundType[] = [\r\n  {\r\n    id: '70m-122cm',\r\n    name: '70m Round',\r\n    distance: 70,\r\n    targetFace: TARGET_122CM,\r\n    arrowsPerEnd: 6,\r\n    totalEnds: 12,\r\n    maxScore: 720\r\n  },\r\n  {\r\n    id: '60m-122cm',\r\n    name: '60m Round',\r\n    distance: 60,\r\n    targetFace: TARGET_122CM,\r\n    arrowsPerEnd: 6,\r\n    totalEnds: 12,\r\n    maxScore: 720\r\n  },\r\n  {\r\n    id: '50m-122cm',\r\n    name: '50m Round',\r\n    distance: 50,\r\n    targetFace: TARGET_122CM,\r\n    arrowsPerEnd: 6,\r\n    totalEnds: 12,\r\n    maxScore: 720\r\n  },\r\n  {\r\n    id: '30m-80cm',\r\n    name: '30m Round',\r\n    distance: 30,\r\n    targetFace: TARGET_80CM,\r\n    arrowsPerEnd: 6,\r\n    totalEnds: 12,\r\n    maxScore: 720\r\n  },\r\n  {\r\n    id: '18m-40cm',\r\n    name: '18m Round',\r\n    distance: 18,\r\n    targetFace: TARGET_40CM,\r\n    arrowsPerEnd: 3,\r\n    totalEnds: 20,\r\n    maxScore: 600\r\n  },\r\n  {\r\n    id: 'practice-30m',\r\n    name: 'Practice 30m',\r\n    distance: 30,\r\n    targetFace: TARGET_80CM,\r\n    arrowsPerEnd: 3,\r\n    totalEnds: 10,\r\n    maxScore: 300\r\n  },\r\n  {\r\n    id: 'practice-18m',\r\n    name: 'Practice 18m',\r\n    distance: 18,\r\n    targetFace: TARGET_40CM,\r\n    arrowsPerEnd: 3,\r\n    totalEnds: 10,\r\n    maxScore: 300\r\n  }\r\n];\r\n\r\nexport class RoundTypes {\r\n  static getAll(): RoundType[] {\r\n    return [...ROUND_TYPES];\r\n  }\r\n\r\n  static getById(id: string): RoundType | undefined {\r\n    return ROUND_TYPES.find(round => round.id === id);\r\n  }\r\n\r\n  static getByDistance(distance: number): RoundType[] {\r\n    return ROUND_TYPES.filter(round => round.distance === distance);\r\n  }\r\n\r\n  static getTargetFace(size: number): TargetFace | undefined {\r\n    switch (size) {\r\n      case 122:\r\n        return TARGET_122CM;\r\n      case 80:\r\n        return TARGET_80CM;\r\n      case 40:\r\n        return TARGET_40CM;\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  static validateRoundType(roundType: Partial<RoundType>): boolean {\r\n    return !!(\r\n      roundType.id &&\r\n      roundType.name &&\r\n      roundType.distance &&\r\n      roundType.targetFace &&\r\n      roundType.arrowsPerEnd &&\r\n      roundType.totalEnds &&\r\n      roundType.maxScore\r\n    );\r\n  }\r\n\r\n  static calculateMaxScore(arrowsPerEnd: number, totalEnds: number): number {\r\n    return arrowsPerEnd * totalEnds * 10;\r\n  }\r\n}\r\n","import { AppState, Session, End, Arrow, ArrowScore } from '@/types';\r\nimport { EventBus } from '@/utils/event-bus';\r\nimport { StorageService } from '@/services/storage-service';\r\nimport { RoundTypes } from '@/utils/round-types';\r\n\r\nexport class App {\r\n  private state: AppState;\r\n  private eventBus: EventBus;\r\n  private storageService: StorageService;\r\n\r\n  constructor() {\r\n    this.eventBus = EventBus.getInstance();\r\n    this.storageService = StorageService.getInstance();\r\n    \r\n    this.state = {\r\n      currentSession: null,\r\n      sessions: [],\r\n      currentView: 'scoring',\r\n      isLoading: false,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    try {\r\n      this.state.isLoading = true;\r\n      \r\n      // Load existing sessions from storage\r\n      await this.loadSessions();\r\n      \r\n      // Initialize UI first\r\n      this.initializeUI();\r\n      \r\n      // Set up event listeners after UI is initialized\r\n      this.setupEventListeners();\r\n      \r\n      this.state.isLoading = false;\r\n      console.log('Archers Scorecard initialized successfully');\r\n    } catch (error) {\r\n      this.handleError(error as Error);\r\n    }\r\n  }\r\n\r\n  private async loadSessions(): Promise<void> {\r\n    const result = await this.storageService.load<Session[]>('sessions');\r\n    if (result.success && result.data) {\r\n      this.state.sessions = result.data;\r\n    }\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Navigation\r\n    document.getElementById('nav-scoring')?.addEventListener('click', () => {\r\n      this.switchView('scoring');\r\n    });\r\n    \r\n    document.getElementById('nav-history')?.addEventListener('click', () => {\r\n      this.switchView('history');\r\n    });\r\n    \r\n    document.getElementById('nav-settings')?.addEventListener('click', () => {\r\n      this.switchView('settings');\r\n    });\r\n\r\n    // Round selection\r\n    const roundSelect = document.getElementById('round-type') as HTMLSelectElement;\r\n    const startButton = document.getElementById('start-session') as HTMLButtonElement;\r\n    \r\n    roundSelect?.addEventListener('change', () => {\r\n      startButton.disabled = !roundSelect.value;\r\n    });\r\n\r\n    startButton?.addEventListener('click', () => {\r\n      this.startNewSession(roundSelect.value);\r\n    });\r\n\r\n    // Score input handling\r\n    document.querySelectorAll('.score-input').forEach(input => {\r\n      input.addEventListener('input', this.handleScoreInput.bind(this));\r\n      input.addEventListener('blur', this.validateScoreInput.bind(this));\r\n    });\r\n\r\n    // End completion\r\n    document.getElementById('complete-end')?.addEventListener('click', () => {\r\n      this.completeCurrentEnd();\r\n    });\r\n\r\n    document.getElementById('clear-end')?.addEventListener('click', () => {\r\n      this.clearCurrentEnd();\r\n    });\r\n  }\r\n\r\n  private initializeUI(): void {\r\n    // Populate round type selector\r\n    this.populateRoundTypes();\r\n    \r\n    // Set initial view\r\n    this.switchView('scoring');\r\n    \r\n    // Update UI with current state\r\n    this.updateUI();\r\n  }\r\n\r\n  private populateRoundTypes(): void {\r\n    const select = document.getElementById('round-type') as HTMLSelectElement;\r\n    if (!select) return;\r\n\r\n    // Clear existing options except the first one\r\n    while (select.children.length > 1) {\r\n      select.removeChild(select.lastChild!);\r\n    }\r\n\r\n    // Add round type options\r\n    RoundTypes.getAll().forEach(roundType => {\r\n      const option = document.createElement('option');\r\n      option.value = roundType.id;\r\n      option.textContent = `${roundType.name} - ${roundType.distance}m`;\r\n      select.appendChild(option);\r\n    });\r\n  }\r\n\r\n  private switchView(view: 'scoring' | 'history' | 'settings'): void {\r\n    const previousView = this.state.currentView;\r\n    this.state.currentView = view;\r\n\r\n    // Update navigation buttons\r\n    document.querySelectorAll('.nav-button').forEach(button => {\r\n      button.classList.remove('active');\r\n    });\r\n    document.getElementById(`nav-${view}`)?.classList.add('active');\r\n\r\n    // Update view visibility\r\n    document.querySelectorAll('.view').forEach(viewElement => {\r\n      viewElement.classList.remove('active');\r\n    });\r\n    document.getElementById(`${view}-view`)?.classList.add('active');\r\n\r\n    // Emit view change event\r\n    this.eventBus.emit('view-changed', { from: previousView, to: view });\r\n\r\n    // Update view-specific content\r\n    if (view === 'history') {\r\n      this.updateHistoryView();\r\n    }\r\n  }\r\n\r\n  private startNewSession(roundTypeId: string): void {\r\n    const roundType = RoundTypes.getById(roundTypeId);\r\n    if (!roundType) {\r\n      this.handleError(new Error('Invalid round type selected'));\r\n      return;\r\n    }\r\n\r\n    const session: Session = {\r\n      id: this.generateSessionId(),\r\n      roundType,\r\n      startTime: new Date(),\r\n      ends: [],\r\n      metadata: {},\r\n      isComplete: false\r\n    };\r\n\r\n    this.state.currentSession = session;\r\n    this.showScoringInterface();\r\n    this.updateUI();\r\n    \r\n    this.eventBus.emit('session-started', session);\r\n  }\r\n\r\n  private showScoringInterface(): void {\r\n    const roundSelector = document.querySelector('.round-selector') as HTMLElement;\r\n    const scoringInterface = document.getElementById('scoring-interface') as HTMLElement;\r\n    \r\n    if (roundSelector) roundSelector.style.display = 'none';\r\n    if (scoringInterface) {\r\n      scoringInterface.classList.remove('hidden');\r\n      scoringInterface.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  private handleScoreInput(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const value = input.value.toUpperCase();\r\n    \r\n    // Validate input as user types\r\n    if (this.isValidScoreInput(value) || value === '') {\r\n      input.classList.remove('invalid');\r\n      this.updateEndTotal();\r\n    } else {\r\n      input.classList.add('invalid');\r\n    }\r\n  }\r\n\r\n  private validateScoreInput(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const value = input.value.toUpperCase();\r\n    \r\n    if (value && !this.isValidScoreInput(value)) {\r\n      input.value = '';\r\n      input.classList.remove('invalid');\r\n      this.showError('Invalid score. Use 1-10, X, or M');\r\n    }\r\n  }\r\n\r\n  private isValidScoreInput(value: string): boolean {\r\n    if (value === 'X' || value === 'M') return true;\r\n    const num = parseInt(value);\r\n    return !isNaN(num) && num >= 1 && num <= 10;\r\n  }\r\n\r\n  private updateEndTotal(): void {\r\n    const inputs = document.querySelectorAll('.score-input') as NodeListOf<HTMLInputElement>;\r\n    let total = 0;\r\n    let validInputs = 0;\r\n\r\n    inputs.forEach(input => {\r\n      const value = input.value.toUpperCase();\r\n      if (value) {\r\n        if (value === 'X') {\r\n          total += 10;\r\n          validInputs++;\r\n        } else if (value === 'M') {\r\n          validInputs++;\r\n        } else {\r\n          const num = parseInt(value);\r\n          if (!isNaN(num) && num >= 1 && num <= 10) {\r\n            total += num;\r\n            validInputs++;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const endTotalElement = document.getElementById('end-total');\r\n    if (endTotalElement) {\r\n      endTotalElement.textContent = total.toString();\r\n    }\r\n\r\n    // Enable complete button if all arrows are scored\r\n    const completeButton = document.getElementById('complete-end') as HTMLButtonElement;\r\n    if (completeButton && this.state.currentSession) {\r\n      completeButton.disabled = validInputs !== this.state.currentSession.roundType.arrowsPerEnd;\r\n    }\r\n  }\r\n\r\n  private completeCurrentEnd(): void {\r\n    if (!this.state.currentSession) return;\r\n\r\n    const inputs = document.querySelectorAll('.score-input') as NodeListOf<HTMLInputElement>;\r\n    const arrows: Arrow[] = [];\r\n\r\n    inputs.forEach(input => {\r\n      const value = input.value.toUpperCase() as ArrowScore;\r\n      if (value) {\r\n        arrows.push({\r\n          value,\r\n          isInnerTen: value === 'X',\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n    });\r\n\r\n    const endNumber = this.state.currentSession.ends.length + 1;\r\n    const endTotal = arrows.reduce((sum, arrow) => {\r\n      if (arrow.value === 'X') return sum + 10;\r\n      if (arrow.value === 'M') return sum + 0;\r\n      const numValue = typeof arrow.value === 'string' ? parseInt(arrow.value) : arrow.value;\r\n      return sum + (isNaN(numValue) ? 0 : numValue);\r\n    }, 0);\r\n\r\n    const end: End = {\r\n      number: endNumber,\r\n      arrows,\r\n      timestamp: new Date(),\r\n      total: endTotal\r\n    };\r\n\r\n    this.state.currentSession.ends.push(end);\r\n    \r\n    // Clear inputs for next end\r\n    this.clearCurrentEnd();\r\n    \r\n    // Update UI\r\n    this.updateUI();\r\n    \r\n    // Save session\r\n    this.saveCurrentSession();\r\n    \r\n    // Check if session is complete\r\n    if (endNumber >= this.state.currentSession.roundType.totalEnds) {\r\n      this.completeSession();\r\n    } else {\r\n      // Update end number display\r\n      const endNumberElement = document.getElementById('current-end-number');\r\n      if (endNumberElement) {\r\n        endNumberElement.textContent = (endNumber + 1).toString();\r\n      }\r\n    }\r\n\r\n    this.eventBus.emit('end-completed', end);\r\n  }\r\n\r\n  private clearCurrentEnd(): void {\r\n    const inputs = document.querySelectorAll('.score-input') as NodeListOf<HTMLInputElement>;\r\n    inputs.forEach(input => {\r\n      input.value = '';\r\n      input.classList.remove('invalid');\r\n    });\r\n    \r\n    const endTotalElement = document.getElementById('end-total');\r\n    if (endTotalElement) {\r\n      endTotalElement.textContent = '0';\r\n    }\r\n    \r\n    const completeButton = document.getElementById('complete-end') as HTMLButtonElement;\r\n    if (completeButton) {\r\n      completeButton.disabled = true;\r\n    }\r\n  }\r\n\r\n  private completeSession(): void {\r\n    if (!this.state.currentSession) return;\r\n\r\n    this.state.currentSession.endTime = new Date();\r\n    this.state.currentSession.isComplete = true;\r\n    \r\n    // Add to sessions list\r\n    this.state.sessions.push(this.state.currentSession);\r\n    \r\n    // Save to storage\r\n    this.saveAllSessions();\r\n    \r\n    // Reset current session\r\n    this.state.currentSession = null;\r\n    \r\n    // Show completion message and reset UI\r\n    this.showSessionComplete();\r\n    \r\n    this.eventBus.emit('session-ended', this.state.currentSession);\r\n  }\r\n\r\n  private showSessionComplete(): void {\r\n    const roundSelector = document.querySelector('.round-selector') as HTMLElement;\r\n    const scoringInterface = document.getElementById('scoring-interface') as HTMLElement;\r\n    \r\n    if (roundSelector) roundSelector.style.display = 'block';\r\n    if (scoringInterface) {\r\n      scoringInterface.classList.add('hidden');\r\n      scoringInterface.style.display = 'none';\r\n    }\r\n    \r\n    // Reset round selector\r\n    const roundSelect = document.getElementById('round-type') as HTMLSelectElement;\r\n    const startButton = document.getElementById('start-session') as HTMLButtonElement;\r\n    \r\n    if (roundSelect) roundSelect.value = '';\r\n    if (startButton) startButton.disabled = true;\r\n    \r\n    // Show success message\r\n    this.showSuccess('Session completed successfully!');\r\n  }\r\n\r\n  private updateUI(): void {\r\n    this.updateRunningTotal();\r\n  }\r\n\r\n  private updateRunningTotal(): void {\r\n    if (!this.state.currentSession) return;\r\n\r\n    const total = this.state.currentSession.ends.reduce((sum, end) => sum + end.total, 0);\r\n    const runningTotalElement = document.getElementById('running-total');\r\n    \r\n    if (runningTotalElement) {\r\n      runningTotalElement.textContent = total.toString();\r\n    }\r\n  }\r\n\r\n  private updateHistoryView(): void {\r\n    const sessionList = document.getElementById('session-list');\r\n    if (!sessionList) return;\r\n\r\n    if (this.state.sessions.length === 0) {\r\n      sessionList.innerHTML = '<p>No sessions recorded yet</p>';\r\n      return;\r\n    }\r\n\r\n    const sessionsHtml = this.state.sessions\r\n      .sort((a, b) => new Date(b.startTime).getTime() - new Date(a.startTime).getTime())\r\n      .map(session => {\r\n        const total = session.ends.reduce((sum, end) => sum + end.total, 0);\r\n        const date = new Date(session.startTime).toLocaleDateString();\r\n        \r\n        return `\r\n          <div class=\"session-item\">\r\n            <h3>${session.roundType.name}</h3>\r\n            <p>Date: ${date}</p>\r\n            <p>Score: ${total}/${session.roundType.maxScore}</p>\r\n            <p>Ends: ${session.ends.length}/${session.roundType.totalEnds}</p>\r\n          </div>\r\n        `;\r\n      })\r\n      .join('');\r\n\r\n    sessionList.innerHTML = sessionsHtml;\r\n  }\r\n\r\n  private async saveCurrentSession(): Promise<void> {\r\n    if (!this.state.currentSession) return;\r\n    \r\n    const result = await this.storageService.save('currentSession', this.state.currentSession);\r\n    if (!result.success) {\r\n      console.error('Failed to save current session:', result.error);\r\n    }\r\n  }\r\n\r\n  private async saveAllSessions(): Promise<void> {\r\n    const result = await this.storageService.save('sessions', this.state.sessions);\r\n    if (!result.success) {\r\n      console.error('Failed to save sessions:', result.error);\r\n    }\r\n  }\r\n\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private handleError(error: Error): void {\r\n    console.error('Application error:', error);\r\n    this.state.error = error.message;\r\n    this.showError(error.message);\r\n    this.eventBus.emit('error-occurred', error);\r\n  }\r\n\r\n  private showError(message: string): void {\r\n    // Simple error display - could be enhanced with a proper notification system\r\n    alert(`Error: ${message}`);\r\n  }\r\n\r\n  private showSuccess(message: string): void {\r\n    // Simple success display - could be enhanced with a proper notification system\r\n    alert(message);\r\n  }\r\n}\r\n","import './styles/main.css';\r\nimport { App } from './app';\r\n\r\n// Initialize the application when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const app = new App();\r\n  app.initialize();\r\n});\r\n"],"names":["EventBus","event","callback","callbacks","index","data","error","StorageService","key","fullKey","serializedData","keysToRemove","i","test","used","value","estimated","percentage","TARGET_122CM","TARGET_80CM","TARGET_40CM","ROUND_TYPES","RoundTypes","id","round","distance","size","roundType","arrowsPerEnd","totalEnds","App","result","roundSelect","startButton","input","select","option","view","previousView","button","viewElement","roundTypeId","session","roundSelector","scoringInterface","num","inputs","total","validInputs","endTotalElement","completeButton","arrows","endNumber","endTotal","sum","arrow","numValue","end","endNumberElement","runningTotalElement","sessionList","sessionsHtml","a","b","date","message"],"mappings":"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"}